'''
snakefile for herv project
'''

rule setup_herv_bed:
    input:
        config = ancient('config.sh'),
        py = ancient('setup_herv_bed.py')
    output:
        '/scratch/chd5n/herv/genmod/herv_transcriptome.bed'
    shell:
        '''
        source {input.config}
        module load anaconda/5.2.0-py3.6
        python {input.py}
        '''

rule setup_herv_fasta:
    input:
        config = ancient('config.sh'),
        bed = rules.setup_herv_bed.output,
        sh = ancient('setup_herv_fasta.sh')
    output:
        '/scratch/chd5n/herv/genmod/herv_transcripts.fa'
    shell:
        '''
        source {input.config}
        sh {input.sh} {input.bed}
        '''

rule setup_ref_txome:
    input:
        config = ancient('config.sh'),
        fasta = rules.setup_herv_fasta.output,
        sh = ancient('setup_ref_txome.sh')
    output:
        targets = '/scratch/chd5n/herv/genmod/target_transcripts.fa',
        gentrome = '/scratch/chd5n/herv/genmod/decoy_aware_transcriptome.fa',
        decoys = '/scratch/chd5n/reference-genome/assembly/encode/GRCh38_no_alt_analysis.salmon_decoys.txt'
    shell:
        '''
        source {input.config}
        sh {input.sh} {input.fasta}
        '''

rule setup_salmon_idx:
    input:
        config = ancient('config.sh'),
        gentrome = rules.setup_ref_txome.output.gentrome,
        decoys = rules.setup_ref_txome.output.decoys,
        sh = ancient('setup_salmon_idx.sh')
    params:
        min_kmer = 25
    output:
        '/scratch/chd5n/herv/salmon/gentrome_k25/complete_ref_lens.bin'
    shell:
        '''
        source {input.config}
        sbatch --output=setup_salmon.out {input.sh} {input.gentrome} {input.decoys} {params.min_kmer}
        '''

rule salmon:
    input:
        config = ancient('config.sh'),
        py = 'salmon.py',
        sh = 'salmon.sh'
    params:
        ## run options: test, live
        ## source options: barcuva, sra, tcga
        ## read_format options: paired, single
        run_type = 'test',
        source = 'tcga',
        read_format = 'paired',
        batch_size = 30,
        idx = os.path.dirname(str(rules.setup_salmon_idx.output))
    output:
        # '/scratch/chd5n/herv/salmon/quant/barcuva.salmon.idx'
        # '/scratch/chd5n/herv/salmon/quant/sra.salmon.idx'
        # '/scratch/chd5n/herv/salmon/quant/tcga.salmon.idx'
    shell:
        '''
        source {input.config}
        module load anaconda/5.2.0-py3.6
        python {input.py} --{params.run_type} \
            --source {params.source} \
            --read_format {params.read_format} \
            --batch_size {params.batch_size} \
            --idx {params.idx}
        '''

rule setup_tcga:
    input:
        config = ancient('config.sh'),
        files = 'gdc_req_files.py',
        cases = 'gdc_req_cases.py',
        legacy = 'gdc_req_legacy.py',
        ann = 'gdc_ann_make.py'
    output:
        msi_man = '/scratch/chd5n/herv/annotations/tcga/msi/manifest.tsv',
        set_man = '/scratch/chd5n/herv/annotations/tcga/manifest.tsv',
        ann = '/scratch/chd5n/herv/annotations/tcga/ann.tsv'
    shell:
        '''
        source {input.config}
        module load anaconda/5.2.0-py3.6
        python {input.ann}
        '''

rule download_tcga:
    input:
        config = ancient('config.sh'),
        py = 'gdc_download.py',
        man = rules.setup_tcga.output.set_man,
        ann = rules.setup_tcga.output.ann
    params:
        run_type = 'test',
        read_format = 'paired',
        token = '/scratch/chd5n/downloads/gdc-user-token.2020-08-06T16_36_05.447Z.txt'
    output:
        man = '/scratch/chd5n/herv/annotations/tcga/manifest_select.tsv',
        ann = '/scratch/chd5n/herv/annotations/tcga/ann_select.tsv',
        log = 'gdc_download.log',
        out = 'download_tcga.out',
        err = 'download_tcga.err'
    shell:
        '''
        source {input.config}
        module load anaconda/5.2.0-py3.6
        python {input.py} --{params.run_type} \
            --read_format {params.read_format} \
            --token {params.token} \
        > {output.out} \
        2> {output.err}
        '''

rule convert_tcga:
    input:
        config = ancient('config.sh'),
        ann = rules.download_tcga.output.ann,
        py = 'gdc_biobambam.py',
        sh = 'gdc_biobambam.sh',
        sub = 'shuffle.sh'
    params:
        run_type = 'test',
        read_format = 'paired',
        batch_size = 40
    output:
        '/scratch/chd5n/herv/fastq/gdc_biobambam.idx'
    shell:
        '''
        source {input.config}
        module load anaconda/5.2.0-py3.6
        python {input.py} --{params.run_type} \
            --read_format {params.read_format} \
            --batch_size {params.batch_size}
        '''

rule quant_check:
    input:
        config = ancient('config.sh'),
        a = '/scratch/chd5n/field-effect/annotations/cohort_A.tsv',
        b = '/scratch/chd5n/field-effect/annotations/cohort_B.tsv',
        c = '/scratch/chd5n/field-effect/annotations/cohort_C.tsv',
        py = 'quant_check.py'
    output:
        d = '/scratch/chd5n/herv/done.txt',
        a = '/scratch/chd5n/herv/todo_A.tsv',
        b = '/scratch/chd5n/herv/todo_B.tsv',
        c = '/scratch/chd5n/herv/todo_C.tsv'
    shell:
        '''
        source {input.config}
        find $salqnt_dir -mindepth 1 -maxdepth 1 -type d | awk -v FS="/" '
            !($0~/tcga-se/) {{print $NF}}' | sort > {output.d}
        module load anaconda/5.2.0-py3.6
        python {input.py}
        '''

rule download_ncbi:
    input:
        config = ancient('config.sh'),
        py = 'ncbi_download.py',
        a = rules.quant_check.output.a,
        b = rules.quant_check.output.b,
        c = rules.quant_check.output.c,
        key = '/scratch/chd5n/downloads/prj_19793_D22501.ngc'
    params:
        run_type = 'test'
    output:
        log = 'ncbi_download.log',
        out = 'download_ncbi.out',
        err = 'download_ncbi.err'
    shell:
        '''
        source {input.config}
        module load anaconda/5.2.0-py3.6
        module load sratoolkit/2.10.5
        python {input.py} --{params.run_type} \
            --tsv_a {input.a} \
            --tsv_b {input.b} \
            --tsv_c {input.c} \
            --key {input.key} \
        > {output.out} \
        2> {output.err}
        '''

rule compress_fastq:
    input:
        sh = 'compress_fastq.sh'
    params:
        target = '/scratch/chd5n/downloads/'
    output:
        err = 'compress_fastq.err'
    shell:
        '''
        sbatch --output=compress_fastq.out {input.sh} {params.target} \
            2> {output.err}
        '''
